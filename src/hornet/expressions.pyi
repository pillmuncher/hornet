from __future__ import annotations

from dataclasses import dataclass
from functools import cache
from typing import Any, Callable, ClassVar, Protocol, override

from .terms import Atom, Functor, Indicator, Term


def lift(func: Callable[..., Term]) -> Callable[..., Expression]: ...


def promote(obj: Any) -> Term: ...


class HasTerm[T: Term](Protocol):
    @property
    def term(self) -> T: ...


@dataclass(frozen=True, slots=True)
class BaseRuleTerm(Term):
    name: ClassVar[str]
    term: Term
    args: tuple[Term, ...]

    @property
    @cache
    @override
    def indicator(self) -> Indicator: ...


@dataclass(frozen=True, slots=True, init=False)
class RuleTerm(BaseRuleTerm):
    name: ClassVar[str] = "RuleTerm"


@dataclass(frozen=True, slots=True, init=False)
class DCGRuleTerm(BaseRuleTerm):
    name: ClassVar[str] = "DCGRuleTerm"


@dataclass(frozen=True, slots=True)
class Rule[T: BaseRuleTerm]:
    term: T


@dataclass(frozen=True, slots=True)
class DCG:
    expr: Expression[Atom | Functor]

    def when(self, *args) -> Rule[DCGRuleTerm]: ...


@dataclass(frozen=True, slots=True)
class Expression[T: Term]:
    term: T

    def __init__(self, term: Term): ...
    def when(self, *args: Any) -> Rule[RuleTerm]: ...
    def __neg__(self: Any): ...
    def __pos__(self: Any): ...
    def __invert__(self: Any): ...
    def __add__(self: Any, other: Any): ...
    def __radd__(self: Any, other: Any): ...
    def __sub__(self: Any, other: Any): ...
    def __rsub__(self: Any, other: Any): ...
    def __mul__(self: Any, other: Any): ...
    def __rmul__(self: Any, other: Any): ...
    def __matmul__(self: Any, other: Any): ...
    def __rmatmul__(self: Any, other: Any): ...
    def __truediv__(self: Any, other: Any): ...
    def __rtruediv__(self: Any, other: Any): ...
    def __floordiv__(self: Any, other: Any): ...
    def __rfloordiv__(self: Any, other: Any): ...
    def __mod__(self: Any, other: Any): ...
    def __rmod__(self: Any, other: Any): ...
    def __pow__(self: Any, other: Any): ...
    def __rpow__(self: Any, other: Any): ...
    def __lshift__(self: Any, other: Any): ...
    def __rlshift__(self: Any, other: Any): ...
    def __rshift__(self: Any, other: Any): ...
    def __rrshift__(self: Any, other: Any): ...
    def __and__(self: Any, other: Any): ...
    def __rand__(self: Any, other: Any): ...
    def __xor__(self: Any, other: Any): ...
    def __rxor__(self: Any, other: Any): ...
    def __or__(self: Any, other: Any): ...
    def __ror__(self: Any, other: Any): ...
    def __call__(self: Any, *args: Any): ...
